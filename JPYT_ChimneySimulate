import numpy as np
import matplotlib.pyplot as plt

# ---------------- Parameters ----------------
g = 9.81              # gravity (m/s^2)
L = 50                # chimney height (m)
break_strength = 20000  # how strong the chimney is before breaking
theta0 = np.deg2rad(5)  # starting tilt from vertical (radians)
dt = 0.01              # time step (seconds)
max_time = 8

# For plotting
frames = []
broke = False

# Initial state
theta = theta0
omega = 0.0  # angular speed
t = 0

while t < max_time:
    # Rotation acceleration for a falling stick
    alpha = (3 * g / (2 * L)) * np.sin(theta)
    
    # Estimate bending force (bigger if taller, heavier, or falling faster)
    bending_force = abs(np.sin(theta) * (L - L/3)) * 1000
    
    # Save position for plotting
    frames.append((theta, broke))
    
    # Check if chimney breaks
    if not broke and bending_force > break_strength:
        broke = True
        break_point = L * 0.33  # about 1/3 up from base
        print(f"Chimney broke at t={t:.2f}s, about {break_point:.1f} m from base")
    
    # Update motion
    omega += alpha * dt
    theta += omega * dt
    t += dt

# ----------- Plot the falling chimney ------------
plt.figure(figsize=(8, 8))
plt.axis('equal')
plt.xlabel("X position (m)")
plt.ylabel("Y position (m)")
plt.title("Falling Chimney Simulation")

for i, (th, broken) in enumerate(frames[::10]):  # draw every 10th frame
    if not broken:
        plt.plot([0, L*np.sin(th)], [0, L*np.cos(th)], 'b')
    else:
        # Draw as two parts after breaking
        bottom_len = break_point
        top_len = L - break_point
        # Bottom
        plt.plot([0, bottom_len*np.sin(th)], [0, bottom_len*np.cos(th)], 'r')
        # Top (just a simple offset here for visual effect)
        plt.plot([bottom_len*np.sin(th), L*np.sin(th)], 
                 [bottom_len*np.cos(th), L*np.cos(th)], 'orange')

plt.plot([-10, L+10], [0, 0], 'k')  # ground
plt.show()
